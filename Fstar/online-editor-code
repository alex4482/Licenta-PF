

open FStar.List
open FStar.All
module Math = FStar.Math.Lib
module L = FStar.List.Tot

type literal = 
    | Var : a:string -> literal
    | NotVar : a:string -> literal
    

type clause =
    | Lit : l: literal -> clause
    | Disj : x: clause -> y: clause -> clause

type guessLevel = int
type variableInfo = {name: string; value: bool; level: guessLevel}
    

type memory = list variableInfo
type formula = list clause


let emptyMem = []
let emptyFormula = []



(*////////////se poate inlocui cu option, dar da eroare si nu stiu ce e////////*)

type maybeLiteral =
    | Nothing : maybeLiteral
    | JustLiteral : lit: literal -> maybeLiteral

(*/////////////DataTypes/////////*)





val negateLit : literal -> literal
let negateLit (lit: literal)
    = match lit with
        | Var x -> NotVar x
        | NotVar x -> Var x
        

val getLiteralValueFromMem : literal -> memory -> bool & bool
let rec getLiteralValueFromMem (lit: literal) (m: memory) = 
    match m with
        | [] -> false, false
        | memHead :: memTail ->
            match lit with
                | Var myLitName -> 
                    if (String.compare myLitName memHead.name) = 0
                        then true, memHead.value
                        else getLiteralValueFromMem (Var myLitName) memTail
                | NotVar myLitName -> 
                    if (String.compare myLitName memHead.name) = 0
                        then true, not memHead.value
                        else getLiteralValueFromMem (NotVar myLitName) memTail
        


val getUnassignedLiteralsFromClause : clause -> memory -> list literal
let rec getUnassignedLiteralsFromClause (cl: clause) (m: memory) 
    : list literal
    = match cl with
        | Lit lit -> let isLitAssigned, litValue = getLiteralValueFromMem lit m in
                    if not isLitAssigned
                        then
                            [lit]
                        else
                            []
        | Disj cl1 cl2 -> let l1 = getUnassignedLiteralsFromClause cl1 m in
                            let l2 = getUnassignedLiteralsFromClause cl2 m in
                                append l1 l2


val assignLiteral : literal -> memory -> guessLevel -> memory
let assignLiteral (lit: literal) (m:memory) (guessLvl: guessLevel) = 
    match lit with
        | Var litName -> let newVarInfo = { name=litName; value=true; level=guessLvl } in newVarInfo :: m
        | NotVar litName -> let newVarInfo = { name=litName; value=false; level=guessLvl } in newVarInfo :: m


val isClauseTrueYet : clause -> memory -> bool
let rec isClauseTrueYet (cl: clause) (m:memory) = 
    match cl with
        | Lit lit -> let existsLit, litValue = getLiteralValueFromMem lit m in litValue
                        
        | Disj cl1 cl2 -> isClauseTrueYet cl1 m || isClauseTrueYet cl2 m


val isClauseFalse : clause -> memory -> bool
let rec isClauseFalse (cl: clause) (m:memory) = match m with
    | emptyMem -> false
    | _ -> match cl with
        | Lit lit -> let isLitAssigned, litValue = getLiteralValueFromMem lit m in
                            isLitAssigned && not litValue
        | Disj cl1 cl2 -> isClauseFalse cl1 m && isClauseFalse cl2 m
        
        
val getLiteralName : literal -> string
let getLiteralName (lit: literal) = match lit with
    | NotVar litName -> litName
    | Var litName -> litName

val findUnassignedLiteral : formula -> memory -> option literal & bool
let rec findUnassignedLiteral (f: formula) (m: memory) = match f with
    | [] -> None, false
    | headClause :: remainingFormula -> 
        let unasLiterals = getUnassignedLiteralsFromClause headClause m in
            match unasLiterals with 
                | [] -> findUnassignedLiteral remainingFormula m
                | headLiteral :: _ -> Some headLiteral, true
      
                                  

(*val fromSome : (#a:Type) -> option a -> a
let fromSome #a (element: option a) = match element with
    | None -> assert false
    | Some value -> value*)
    
    
    
    
(*////////////DPLL Propagation//////////////*)
   
   
////////////functions for propagation of unit clauses case 
val propagateUnitClause : clause -> memory -> guessLevel -> memory & bool
let propagateUnitClause (cl: clause) (m: memory) (currentLevel: guessLevel) =
  let literals = getUnassignedLiteralsFromClause cl m in
    match literals with
        | [] -> m, false
        | aLiteral :: remainingLiterals -> 
            match remainingLiterals with
                | [] -> 
                    let condition = isClauseTrueYet cl m in 
                        if condition
                            then m, false
                            else let newMem = assignLiteral aLiteral m currentLevel in
                                    newMem, true
                            
                | _ -> m, false
                
val unitClausePropagation : formula -> memory -> guessLevel -> memory
let rec unitClausePropagation (f: formula) (m: memory) (currentLevel: guessLevel) =
    match f with
        | [] -> m
        | aClause :: remainingFormula -> 
            let newMem, didPropagate = propagateUnitClause aClause m currentLevel in
                if didPropagate
                    then unitClausePropagation remainingFormula newMem currentLevel 
                    else newMem



////////////functions for propagation of pure literals case

val existsLiteralsInClause : clause -> list literal -> bool
let rec existsLiteralsInClause  (cl: clause) (literals: list literal) =
    match cl with
        | Lit lit -> contains lit literals 
        | Disj cl1 cl2 -> existsLiteralsInClause cl1 literals || existsLiteralsInClause cl2 literals

val eliminateClausesWithLiterals : formula -> list literal -> formula
let rec eliminateClausesWithLiterals (f: formula) (literals: list literal) : Tot formula (decreases f) =
    match f with
        | [] -> []
        | cl :: otherFormula -> 
            let exist = existsLiteralsInClause cl literals in
                let newRemainingFormula = eliminateClausesWithLiterals otherFormula literals in
                    if not exist
                        then cl :: newRemainingFormula
                        else newRemainingFormula
           


let filter_length (#a:_) (f:a -> bool) (l:list a)
  : Lemma (L.length (L.filter f l) <= L.length l)
  = admit()       

let rec removeLiteralsWithBothPolarities literals : Tot (list literal) (decreases (L.length literals)) = 
    match literals with
        | [] -> []
        | lit :: otherLiterals -> let negatedLit = negateLit lit in
            let doesContain = L.contains negatedLit otherLiterals in
            if doesContain 
                then 
                    let myFilter = (fun (x: literal) -> not (x = negatedLit || x = lit)) in
                        filter_length myFilter otherLiterals;
                        removeLiteralsWithBothPolarities (L.filter myFilter otherLiterals)
                                
                else
                    let newOtherLiterals = removeLiteralsWithBothPolarities otherLiterals in
                       lit :: newOtherLiterals
                 
let rec levelsInClause (cl: clause) : (res: int {res >= 0}) =
    match cl with
        | Lit lit -> 0
        | Disj cl1 cl2 -> 1 + Math.max (levelsInClause cl1) (levelsInClause cl2) 
        
let clause_level_compare (cl1: clause) (cl2: clause)
  : Lemma (levelsInClause cl1 > levelsInClause cl2)
  = admit()

val addOrRemoveLiteralsToArray : (literals: list literal) -> (cl: clause) -> Tot (list literal)
let rec addOrRemoveLiteralsToArray literals cl : Tot (list literal) (decreases (levelsInClause cl))  =
    match cl with
        | Lit literal -> 
            if L.contains literal literals 
                then literals
                else literal :: literals
        | Disj cl1 cl2 -> 
            clause_level_compare cl cl1;
            let newList = addOrRemoveLiteralsToArray literals cl1 in
                clause_level_compare cl cl2;
                addOrRemoveLiteralsToArray newList cl2

val findOnePolarityLiterals' : formula -> list literal -> list literal 
let findOnePolarityLiterals' (clauses: formula) (literals: list literal) =
    let newLiterals = L.fold_left addOrRemoveLiteralsToArray literals clauses in
        removeLiteralsWithBothPolarities newLiterals
                 
val findOnePolarityLiterals : formula -> list literal
let findOnePolarityLiterals (f: formula) = findOnePolarityLiterals' f []


val assignAllLiteralsTrueInMem : memory -> list literal -> guessLevel -> memory
let rec assignAllLiteralsTrueInMem m literals currentLevel : Tot memory (decreases literals) = 
    match literals with
        | [] -> m
        | _ -> let headLit :: otherLiterals = literals in
                let (appearsLiteralInMem, _) = getLiteralValueFromMem headLit m in
                if not appearsLiteralInMem
                    then assignAllLiteralsTrueInMem (assignLiteral headLit m currentLevel) otherLiterals currentLevel
                    else assignAllLiteralsTrueInMem m otherLiterals currentLevel

let formulasLengthLemma (f1: formula) (f2: formula)
  : Lemma (L.length f1 > L.length f2)
  = admit()  

val pureLiteralPropagation : formula -> memory -> guessLevel -> formula & memory 
let pureLiteralPropagation f m currentLevel : Tot (formula & memory) (decreases (L.length f)) =
  let literalsFound = findOnePolarityLiterals f
   in if not (literalsFound = [])
        then let smallerF = eliminateClausesWithLiterals f literalsFound in
            let newMem = assignAllLiteralsTrueInMem m literalsFound currentLevel in
                (smallerF, newMem)
                //formulasLengthLemma f smallerF;
                //pureLiteralPropagation smallerF newMem currentLevel
        else (f, m)

(*
val pureLiteralPropagation : formula -> memory -> guessLevel -> formula & memory
let pureLiteralPropagation f m currentLevel : Tot (formula & memory) (decreases (L.length f))  =
  let literalsFound = findOnePolarityLiteral f
   in if not (literalsFound = [])
        then
          let (newFormula, newMem) = pureLiteralPropagation' (eliminateClausesWithLiteral f literalsFound) (assignAllLiteralsTrueInMem m literalsFound currentLevel) currentLevel in
          formulasLengthLemma  f newFormula;
          (newFormula, newMem)
        else (f, m)
*)

(*
val propagate_part_fst : formula -> memory -> guessLevel -> memory
let rec propagate_part_fst f m currentLevel : Tot memory (decreases (L.length f))  = 
    let (newFormula, newMem, didPropagate) = pureLiteralPropagation f m currentLevel in
        if didPropagate
            then propagate_part_fst newFormula newMem currentLevel
            else propagate_part_snd f newMem currentLevel
            
val propagate_part_snd : formula -> memory -> guessLevel -> memory
let propagate_part_snd f m currentLevel : memory = 
    let (newMem, didPropagate) = unitClausePropagation f m currentLevel in
        if didPropagate
            then propagate_part_snd f newMem currentLevel
            else newMem
*)

val propagate : formula -> memory -> guessLevel -> memory
let propagate f m currentLevel : Tot memory  = 
        match f with
        | [] -> m
        | _ -> let (newFormula, newMem) = pureLiteralPropagation f m currentLevel in
                let newMem' = unitClausePropagation f newMem currentLevel
                   in newMem'
                   
                   
/////////////////////ConflictFunctions

let intersect (#a:eqtype) (l1: list a) (l2: list a) : list a = 
    let existsInList2 = (fun (x: a) -> L.contains x l2) in
        L.filter existsInList2 l1
        
val getAllLiteralsFromClause : clause -> list literal
let rec getAllLiteralsFromClause cl = match cl with
    | Lit lit -> [lit]
    | Disj cl1 cl2 -> intersect (getAllLiteralsFromClause cl1) (getAllLiteralsFromClause cl2)


let removeFromList (#a:eqtype) (el: a) (someList: list a) = filter (fun (x: a) -> not (x = el)) someList 


val backTrackTo : guessLevel -> memory -> memory
let rec backTrackTo currentLevel m = 
    if m = [] 
        then []
        else 
            let (var :: otherMem) = m in
                let backTrackToOtherMem = backTrackTo currentLevel otherMem in
                if var.level > currentLevel
                    then backTrackToOtherMem
                    else var :: backTrackToOtherMem


val getLiteralGuessLevelFromMem : memory -> literal -> ML guessLevel
let rec getLiteralGuessLevelFromMem m l  = 
    if m = [] 
        then failwith "literal should have guess level in memory but does not have" 
        else
            let (var :: otherMem) = m in
              if var.name = (getLiteralName l)
                then var.level
                else getLiteralGuessLevelFromMem otherMem l
        
val getMaxLevelFrom : list guessLevel -> ML guessLevel
let getMaxLevelFrom levels =
  if levels = []
    then failwith "error at get max level from" 
    else
        let (level :: otherLevels) = levels in
          L.fold_left (fun (x: guessLevel) (y: guessLevel) -> if x >= y then x else y) level otherLevels


val removeLevelsBiggerThan : list guessLevel -> guessLevel -> list guessLevel
let rec removeLevelsBiggerThan levelsList x = 
    if levelsList = [] 
        then [] 
        else 
            let (level :: otherLevels) = levelsList in
                if level >= x
                    then removeLevelsBiggerThan otherLevels x
                    else level :: removeLevelsBiggerThan otherLevels x

val makeClauseFromLiterals : list literal -> ML clause
let rec makeClauseFromLiterals (literals: list literal ) = match literals with
    | [] -> failwith "error at resolution when making clause from literals"
    | (l :: []) -> Lit l
    | (l :: otherLiterals) -> Disj (Lit l) (makeClauseFromLiterals otherLiterals)


val getHighestLevelBelowConflict : list literal -> guessLevel -> memory -> ML guessLevel
let getHighestLevelBelowConflict literals conflictLevel m =
    let allLevels = map (getLiteralGuessLevelFromMem m) literals in
        getMaxLevelFrom (removeLevelsBiggerThan allLevels conflictLevel)


val resoluteTwoClauses : clause -> clause -> literal -> guessLevel -> memory -> ML ( clause & guessLevel)
let resoluteTwoClauses cl1 cl2 pivot conflictLevel m =
  let firstLiterals = removeFromList (negateLit pivot) (getAllLiteralsFromClause cl1) in
    let secondLiterals = removeFromList pivot (getAllLiteralsFromClause cl2) in
        if firstLiterals = []
            then
              if secondLiterals = []
                then failwith "error at resolution of 2 clauses"
                else
                  if (length secondLiterals) = 1
                    then (Lit (hd secondLiterals), 0)
                    else 
                        let highestLevelBelowConflict = getHighestLevelBelowConflict secondLiterals conflictLevel m in
                            let newClause = makeClauseFromLiterals secondLiterals in
                                (newClause, highestLevelBelowConflict)
            else
              if secondLiterals = []
                then
                  if (length firstLiterals) = 1
                    then (Lit (hd firstLiterals), 0)
                    else
                        let newClause = makeClauseFromLiterals firstLiterals in
                            let highestLevelBelowConflict = getHighestLevelBelowConflict firstLiterals conflictLevel m in
                                (newClause, highestLevelBelowConflict)
                else 
                    let bothClauseLiterals = append secondLiterals firstLiterals in
                        let newClause = makeClauseFromLiterals bothClauseLiterals in
                            let highestLevelBelowConflict = getHighestLevelBelowConflict bothClauseLiterals conflictLevel m in
                                (newClause, highestLevelBelowConflict)


        
val findSecondClauseForResolution' : list literal -> list clause -> ML ( clause & literal )
let rec findSecondClauseForResolution' faultyLiterals clauses =
    if faultyLiterals = [] then failwith "error when finding second clause for resolution, no faulty literals" else
        if clauses = [] then failwith "error when finding second clause for resolution, no other clauses given" else
            let (cl :: otherClauses) = clauses in
                let clauseLiterals = getAllLiteralsFromClause cl in
                    let foundLiterals = intersect faultyLiterals clauseLiterals in
                        if [] = foundLiterals
                            then findSecondClauseForResolution' faultyLiterals otherClauses
                            else (cl, hd foundLiterals)

val findSecondClauseForResolution : clause -> list clause -> list literal -> ML (clause & literal)
let findSecondClauseForResolution firstClause otherClauses faultyLiterals =
    let firstClauseLiterals = getAllLiteralsFromClause firstClause in 
        if (intersect firstClauseLiterals faultyLiterals) = []
            then 
                let negatedFaultyLiterals = L.map negateLit faultyLiterals in
                    let faultyFirstClauseLiterals = intersect firstClauseLiterals negatedFaultyLiterals in
                        let negatedFaultyFirstClauseLiterals = L.map negateLit faultyFirstClauseLiterals in
                            findSecondClauseForResolution' negatedFaultyFirstClauseLiterals otherClauses
            else 
                let faultyFirstClauseLiterals = intersect firstClauseLiterals faultyLiterals in
                    let negatedFaultyFirstClauseLiterals = L.map negateLit faultyFirstClauseLiterals in
                        findSecondClauseForResolution' negatedFaultyFirstClauseLiterals otherClauses        

        
val resolution' : list clause -> guessLevel -> list literal -> guessLevel -> memory -> ML (list clause & guessLevel)
let rec resolution' clauses conflictLevel faultyLiterals backTrackLevel m =
  if L.length clauses = 1
    then (clauses, backTrackLevel)
    else
      let firstClause = hd clauses in
       let (secondClause, literalToRemove) = findSecondClauseForResolution firstClause (tl clauses) faultyLiterals in
           let (newClause, newGuessLevel) = resoluteTwoClauses firstClause secondClause literalToRemove conflictLevel m in
            let auxClauses = removeFromList secondClause (tl clauses) in
               resolution' auxClauses conflictLevel faultyLiterals (Math.max backTrackLevel newGuessLevel) m

        
val resolution : list clause -> guessLevel -> list literal -> memory -> ML (clause & guessLevel)
let resolution clauses conflictLevel faultyLiterals m =
    let (finalClause, guessLevel) = resolution' clauses conflictLevel faultyLiterals (-1) m in 
        if L.length finalClause = 1  
            then (hd finalClause, guessLevel)
            else failwith "more than 1 clause resulted in the resolution"


val findClausesForResolution : formula -> list literal -> list clause
let rec findClausesForResolution f faultyLiterals = 
    match f with
        | [] -> []
        | (clause :: otherClauses) -> 
          let clauseLiterals = getAllLiteralsFromClause clause in 
            let literalsList = intersect (L.map negateLit faultyLiterals) clauseLiterals in
                if literalsList = []
                    then findClausesForResolution otherClauses faultyLiterals
                    else intersect [clause] (findClausesForResolution otherClauses faultyLiterals)

val findFaultyLiteralsInConflict : clause -> guessLevel -> memory -> ML (list literal)
let rec findFaultyLiteralsInConflict cl guessLevel m = match cl with
    | Lit lit -> 
        let litGuessLevel = getLiteralGuessLevelFromMem m lit in
            if litGuessLevel = guessLevel 
                then [lit]
                else []
    | Disj cl1 cl2 -> 
        let faultyLiterals1 = findFaultyLiteralsInConflict cl1 guessLevel m in
            let faultyLiterals2 = findFaultyLiteralsInConflict cl2 guessLevel m in
                intersect faultyLiterals1 faultyLiterals2

val solveConflict : formula -> memory -> guessLevel -> clause -> ML (formula & memory & guessLevel)
let solveConflict f m conflictLevel conflictClause =
  let faultyLiterals = findFaultyLiteralsInConflict conflictClause conflictLevel m in
    let clausesForResolution = findClausesForResolution f faultyLiterals in
        if clausesForResolution = []         
            then failwith "error at solveConflict, should not be empty"  
            else                               
              let (newClause, newLevel) = resolution clausesForResolution conflictLevel faultyLiterals m
               in (newClause :: f, backTrackTo newLevel m, newLevel)


val existsConflict : formula -> memory -> (option clause) & bool
let rec existsConflict f m : Tot ((option clause) & bool) (decreases (L.length f)) = 
    if f = [] 
        then (None, false)
        else if m = [] 
                then (None, false)
                else 
                    let cl :: remainingF = f in
                        if isClauseFalse cl m
                            then (Some cl, true)
                        else existsConflict remainingF m
                        
                        
///////////////CDCL


val solveFormula' : formula -> memory -> guessLevel -> ML memory
let rec solveFormula' f m currentLevel =
  let (conflictClause, isConflict) = existsConflict f m in
    if isConflict
        then
          if m = [] || currentLevel = 0
            then []
            else
                let (newF, newMem, newLevel) = solveConflict f m currentLevel (FStar.Option.get conflictClause) in
                    solveFormula' newF newMem newLevel
        else
            let newMem = propagate f m currentLevel in
                let lit, boolean = findUnassignedLiteral f newMem in
                    if boolean
                        then
                            let updatedMem = assignLiteral (FStar.Option.get lit) newMem currentLevel in
                                let nextLevel = currentLevel + 1 in
                                    solveFormula' f updatedMem nextLevel
                        else 
                            let (conflictClause2, isConflict2) = existsConflict f newMem in
                                if isConflict2
                                      then solveFormula' f newMem currentLevel
                                      else newMem



val solveFormula : formula -> ML memory
let solveFormula f = solveFormula' f emptyMem 0